import os
import json
from dotenv import load_dotenv
import maps_api
from openai import AzureOpenAI

load_dotenv()

client = AzureOpenAI(
    api_key=os.getenv("AZURE_OPENAI_API_KEY"),
    api_version="2024-05-01-preview",
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT")
)

GPT_DEPLOYMENT = os.getenv("AZURE_OPENAI_DEPLOYMENT", "gpt-4o")

tools = [
    {
        "type": "function",
        "function": {
            "name": "maps_geocode",
            "description": "Convert address to geographic coordinates",
            "parameters": {
                "type": "object",
                "properties": {
                    "address": {"type": "string", "description": "The address to geocode"}
                },
                "required": ["address"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "maps_reverse_geocode",
            "description": "Convert coordinates to a human-readable address",
            "parameters": {
                "type": "object",
                "properties": {
                    "latitude": {"type": "number", "description": "Latitude of the location"},
                    "longitude": {"type": "number", "description": "Longitude of the location"}
                },
                "required": ["latitude", "longitude"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "maps_search_places",
            "description": "Search for places using a text query",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {"type": "string", "description": "Text query to search for places"},
                    "latitude": {"type": "number", "description": "Latitude for location-based search (optional)"},
                    "longitude": {"type": "number", "description": "Longitude for location-based search (optional)"},
                    "radius": {"type": "integer", "description": "Search radius in meters (optional)"}
                },
                "required": ["query"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "maps_place_details",
            "description": "Get detailed information about a place",
            "parameters": {
                "type": "object",
                "properties": {
                    "place_id": {"type": "string", "description": "The place ID"}
                },
                "required": ["place_id"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "maps_distance_matrix",
            "description": "Calculate distances and times between points",
            "parameters": {
                "type": "object",
                "properties": {
                    "origins": {
                        "type": "array",
                        "items": {"type": "string"},
                        "description": "List of origin addresses"
                    },
                    "destinations": {
                        "type": "array",
                        "items": {"type": "string"},
                        "description": "List of destination addresses"
                    },
                    "mode": {
                        "type": "string",
                        "enum": ["driving", "walking", "bicycling", "transit"],
                        "description": "Mode of transportation"
                    }
                },
                "required": ["origins", "destinations"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "maps_elevation",
            "description": "Get elevation data for locations",
            "parameters": {
                "type": "object",
                "properties": {
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "latitude": {"type": "number"},
                                "longitude": {"type": "number"}
                            },
                            "required": ["latitude", "longitude"]
                        },
                        "description": "Array of location objects with latitude and longitude"
                    }
                },
                "required": ["locations"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "maps_directions",
            "description": "Get directions between points",
            "parameters": {
                "type": "object",
                "properties": {
                    "origin": {"type": "string", "description": "Start address"},
                    "destination": {"type": "string", "description": "End address"},
                    "mode": {
                        "type": "string",
                        "enum": ["driving", "walking", "bicycling", "transit"],
                        "description": "Mode of transportation"
                    }
                },
                "required": ["origin", "destination"]
            }
        }
    }
]

def ask_gpt_with_tool_call(question: str):
    # ÂàùÂßãÂåñÂ∞çË©±Ë®äÊÅØ
    messages = [
        {"role": "system", "content": "‰Ω†ÊòØ‰∏ÄÂÄãÂú∞ÂúñÂä©ÁêÜÔºåÂπ´Âä©‰ΩøÁî®ËÄÖÊü•Ë©¢Âú∞ÁêÜË≥áË®ä„ÄÇ"},
        {"role": "user", "content": question}
    ]
    
    max_iterations = 10  # Èò≤Ê≠¢ÁÑ°ÈôêÂæ™Áí∞
    iteration = 0
    
    while iteration < max_iterations:
        iteration += 1
        print(f"\nüîÑ Âü∑Ë°åÁ¨¨ {iteration} Ê≠•...")
        
        # ÂëºÂè´ GPT
        response = client.chat.completions.create(
            model=GPT_DEPLOYMENT,
            messages=messages,
            tools=tools,
            tool_choice="auto"
        )
        
        choice = response.choices[0]
        
        # Â¶ÇÊûúÊ≤íÊúâÂ∑•ÂÖ∑ÂëºÂè´ÔºåË°®Á§∫ GPT Â∑≤Á∂ìÂèØ‰ª•ÂõûÁ≠î‰∫Ü
        if not choice.message.tool_calls:
            print("ü§ñ GPT ÂõûÁ≠îÔºö", choice.message.content)
            return
        
        # ËôïÁêÜÊâÄÊúâÂ∑•ÂÖ∑ÂëºÂè´ÔºàGPT ÂèØËÉΩÂêåÊôÇÂëºÂè´Â§öÂÄãÂ∑•ÂÖ∑Ôºâ
        tool_messages = []
        assistant_message = {
            "role": "assistant",
            "tool_calls": choice.message.tool_calls
        }
        messages.append(assistant_message)
        
        for tool_call in choice.message.tool_calls:
            tool_name = tool_call.function.name
            try:
                tool_args = json.loads(tool_call.function.arguments)
            except json.JSONDecodeError:
                print(f"‚ùå ÁÑ°Ê≥ïËß£ÊûêÂ∑•ÂÖ∑ÂèÉÊï∏Ôºö{tool_call.function.arguments}")
                continue
            
            print(f"üîß Âü∑Ë°åÂ∑•ÂÖ∑Ôºö{tool_name}")
            print(f"üìù ÂèÉÊï∏Ôºö{tool_args}")
            
            try:
                tool_func = getattr(maps_api, tool_name)
                tool_result = tool_func(**tool_args)
                print(f"‚úÖ Â∑•ÂÖ∑ÁµêÊûúÔºö{str(tool_result)[:200]}...")
                
                tool_message = {
                    "role": "tool",
                    "tool_call_id": tool_call.id,
                    "name": tool_name,
                    "content": str(tool_result)
                }
                tool_messages.append(tool_message)
                
            except Exception as e:
                print(f"‚ùå Â∑•ÂÖ∑Âü∑Ë°åÈåØË™§Ôºö{str(e)}")
                tool_message = {
                    "role": "tool",
                    "tool_call_id": tool_call.id,
                    "name": tool_name,
                    "content": f"ÈåØË™§Ôºö{str(e)}"
                }
                tool_messages.append(tool_message)
        
        # Â∞áÂ∑•ÂÖ∑ÁµêÊûúÂä†ÂÖ•Â∞çË©±Ê≠∑Âè≤
        messages.extend(tool_messages)
    
    print("‚ö†Ô∏è Â∑≤ÈÅîÂà∞ÊúÄÂ§ßËø≠‰ª£Ê¨°Êï∏ÔºåÂÅúÊ≠¢Âü∑Ë°å„ÄÇ")


if __name__ == "__main__":
    print("üåè ÂïüÂãï GPT Âú∞ÂúñÂä©ÁêÜÔºåÊîØÊè¥Â§öÊ≠•È©üÂáΩÊï∏ÂëºÂè´ÔºàËº∏ÂÖ• exit Èõ¢ÈñãÔºâ")
    print("\nüìã ÁØÑ‰æãÂïèÈ°åÔºö")
    print("  ‚Ä¢ Âè∞Âåó101ÈôÑËøëÊúâÂì™‰∫õÈ§êÂª≥ÔºüÁÑ∂ÂæåÂëäË®¥ÊàëÂà∞ÊúÄËøëÁöÑ‰∏ÄÈñìË¶ÅÂ§ö‰πÖÔºü")
    print("  ‚Ä¢ ÊâæÂá∫Êñ∞ÂåóÂ∏ÇÊîøÂ∫úÁöÑÂú∞ÂùÄÔºåÁÑ∂ÂæåË®àÁÆóÂæûÂè∞ÂåóËªäÁ´ôÂà∞ÈÇ£Ë£°ÁöÑË∑ùÈõ¢")
    print("  ‚Ä¢ ÊêúÂ∞ãÂè∞ÂåóÁöÑÂíñÂï°Âª≥Ôºå‰∏¶Êèê‰æõÂâç‰∏âÈñìÁöÑË©≥Á¥∞Ë≥áË®ä")
    
    while True:
        user_input = input("\nüßë Ë´ãËº∏ÂÖ•ÂïèÈ°åÔºö ")
        if user_input.lower() in ("exit", "quit"):
            break
        ask_gpt_with_tool_call(user_input)
